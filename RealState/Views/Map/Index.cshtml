@using RealState.Container
@using RealState.Entity
@{
    ViewData["Title"] = "Index";
    Layout = "~/Views/Shared/_AdminLayout.cshtml";
}

@model List<Drawing>

@section Styles {
    <link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css" integrity="sha256-p4NxAoJBhIIN+hmNHrzRCf9tD/miZyoHS5obTRR9BMY=" crossorigin="" />
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/leaflet.draw/1.0.4/leaflet.draw.css" />
    <style>
        #map {
            height: 70vh; /* Haritanın yüksekliğini ayarlayın */
            width: 100%; /* Haritanın genişliğini ayarlayın */
        }
    </style>
}

<div class="pc-container">
    <div class="pc-content">
        <div class="row">
            <div id="map"></div> <!-- Harita konteyneri -->
        </div>
    </div>
</div>

@section Scripts {

    <script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js" integrity="sha256-20nQCchB9co0qIjJZRGuk2/Z9VM+kNiyxNV1lvTlZBo=" crossorigin=""></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/leaflet.draw/1.0.4/leaflet.draw.js"></script>
    <script>
        // Harita oluşturuluyor ve başlangıç koordinatları ile başlatılıyor
        var map = L.map('map').setView([40.2150789, 28.9000977], 12);

        // Tile layer ekleniyor
        L.tileLayer('https://tile.openstreetmap.org/{z}/{x}/{y}.png', {
            maxZoom: 19,
            attribution: '&copy; <a href="http://www.openstreetmap.org/copyright">OpenStreetMap</a>'
        }).addTo(map);

        // İsteğe bağlı olarak bir marker ekleyebilirsiniz
        var customIcon = L.divIcon({
            className: 'custom-icon',
            html: '<div style=" display: flex; align-items: center; justify-content: center;"><img style="width: 50px; height: 50px; border-radius: 50%;" src="/images/dia.jpg" /></div>',
            iconAnchor: [25, 50], // İkonun tabanı, markerın altı
            popupAnchor: [-15, -50] // Popup'ı konumlandırma
        });


        // Özel ikon ile marker ekleniyor
        L.marker([40.2125184, 28.9204205], { icon: customIcon }).addTo(map)
            .bindPopup('Dialog Söz')
            .openPopup();

        var drawnItems = new L.FeatureGroup();
        map.addLayer(drawnItems);

        var drawControl = new L.Control.Draw({
            draw: {
                polygon: true,
                polyline: true,
                rectangle: true,
                circle: true,
                marker: true
            },
            edit: {
                featureGroup: drawnItems,
                remove: true,
            }
        });
        map.addControl(drawControl);

        var drawnGeoJSON;//çizilmiş şekli saklamak için değişken


        map.on('draw:created', function (e) {
            var layer = e.layer;

            drawnItems.addLayer(layer);



            var geoJsonObject = layer.toGeoJSON();

            console.log(geoJsonObject);

            drawnGeoJSON = JSON.stringify(geoJsonObject.geometry);


        });


        map.on('draw:edited', function (e) {
            var layers = e.layers;
            layers.eachLayer(function (layer) {


                console.log('Layer edited:', layer.toGeoJSON());
            });
        });

        map.on('draw:deleted', function (e) {
            if (e.layers) {
                var layers = e.layers;
                layers.eachLayer(function (layer) {
                    console.log('Layer deleted:', layer);
                });
            }
        });


        function createSaveButton() {
            var saveButton = L.Control.extend({
                options: {
                    position: 'topright'
                },
                onAdd: function (map) {
                    var container = L.DomUtil.create('div', 'leaflet-bar leaflet-control leaflet-control-custom');

                    container.innerHTML = '<button onclick="saveGeoJson()">Save</button>';

                    return container;
                }
            });

            map.addControl(new saveButton());
        }

        // Butona tıklandığında geoJSON'u post etme fonksiyonu
        function saveGeoJson() {
            if (drawnGeoJSON) {
                var datas = drawnGeoJSON;

                $.ajax({
                    url: "/Map/SaveGeoJson/", // Controller action URL'si
                    type: 'POST',
                    contentType: 'application/json',
                    data: datas,
                    success: function (response) {
                        // Başarılı işlem durumunda yapılacaklar
                        console.log(response);
                        alert('GeoJSON data saved successfully.');
                    },
                    error: function (xhr, status, error) {
                        // Hata durumunda yapılacaklar
                        console.error(xhr.responseText);
                        alert('Error occurred while saving GeoJSON data.');
                    }
                });
            }
        }

        // Buton oluşturma işlemini çağır
        createSaveButton();

        var osm = L.tileLayer('https://tile.openstreetmap.org/{z}/{x}/{y}.png', {
            maxZoom: 19,
            attribution: 'Osm Katmanı'
        });

        var osmHOT = L.tileLayer('https://{s}.tile.openstreetmap.fr/hot/{z}/{x}/{y}.png', {
            maxZoom: 19,
            attribution: 'Osm Hot Katmanı'
        });

        var osmFr = L.tileLayer('http://{s}.tile.openstreetmap.fr/osmfr/{z}/{x}/{y}.png', {
            attribution: 'Map data &copy; <a href="https://www.openstreetmap.org/">OpenStreetMap</a>',
            maxZoom: 19
        }).addTo(map);

        var baseMaps = {
            "Osm": osm,
            "Osm.HOT": osmHOT,

        };

        var overMap = {
            "Osm.Fr": osmFr
        };

        var layers = L.control.layers(baseMaps, overMap).addTo(map);

        var geos = L.layerGroup();
        var polygonGroup = L.layerGroup();
        var points = L.layerGroup();
        var lines = L.layerGroup();

        @foreach (var drawing in Model)
        {
            // Geometry'i GeoJSON formatına dönüştür
            string geoJson = GeometryConverter.WktToGeoJson(drawing.Geometry.ToString());

            // Leaflet haritasına geometriyi ekle
            <text>
                                var geoJsonFeature = @Html.Raw(geoJson);

            var geo = L.geoJSON(geoJsonFeature, {
                onEachFeature: function (feature, layer) {
                    layer.bindPopup('<b>İsim:</b> @drawing.Name <br> <b>Açıklama:</b> @drawing.Description<br> <a href="/Map/UpdateGeo/@drawing.DrawingId" class="btn btn-xs btn-success text-light">Güncelle</a>&nbsp; <a href="/Map/DeleteGeo/@drawing.DrawingId" class="btn btn-xs btn-danger text-light">Sil</a>');
                }
            });
            geos.addLayer(geo);


            if ('@drawing.Type' === 'Polygon') {
                layer = L.geoJSON(geoJsonFeature, {
                    style: {
                        fillColor: 'red',  // Alanın iç rengi
                        color: 'red',      // Alanın kenar çizgisi rengi
                        weight: 2          // Alanın kenar çizgisi kalınlığı
                    },
                    onEachFeature: function (feature, layer) {
                        layer.bindPopup('<b>İsim:</b> @drawing.Name <br> <b>Açıklama:</b> @drawing.Description<br> <a href="/Map/UpdateGeo/@drawing.DrawingId" class="btn btn-xs btn-success text-light">Güncelle</a>&nbsp; <a href="/Map/DeleteGeo/@drawing.DrawingId" class="btn btn-xs btn-danger text-light">Sil</a>');
                    }
                });
                polygonGroup.addLayer(layer);
            };

            if ('@drawing.Type' === 'Point') {
                pointLayer = L.geoJSON(geoJsonFeature, {
                    onEachFeature: function (feature, layer) {
                        layer.bindPopup('<b>İsim:</b> @drawing.Name <br> <b>Açıklama:</b> @drawing.Description<br> <a href="/Map/UpdateGeo/@drawing.DrawingId" class="btn btn-xs btn-success text-light">Güncelle</a>&nbsp; <a href="/Map/DeleteGeo/@drawing.DrawingId" class="btn btn-xs btn-danger text-light">Sil</a>');
                    }
                });
                points.addLayer(pointLayer);
            };

            if ('@drawing.Type' === 'LineString') {
                line = L.geoJSON(geoJsonFeature, {
                    style: {
                        fillColor: 'purple',
                        color: 'purple',
                        weight: 6
                    },
                    onEachFeature: function (feature, layer) {
                        layer.bindPopup('<b>İsim:</b> @drawing.Name <br> <b>Açıklama:</b> @drawing.Description<br> <a href="/Map/UpdateGeo/@drawing.DrawingId" class="btn btn-xs bg-dark">Güncelle</a>&nbsp; <a href="/Map/DeleteGeo/@drawing.DrawingId" class="btn btn-xs bg-danger">Sil</a>');
                    }
                });
                lines.addLayer(line);
            };


            </text>
        };


        layers.addOverlay(geos, "Şekiller");
        layers.addOverlay(polygonGroup, "Alan");
        layers.addOverlay(points, "Lokasyon");
        layers.addOverlay(lines, "Düzlem");
    </script>
}
